import numpy as np

import json
# unit for each parameter is commented after it is declared (inline)
# if the suggested value for the parameter is different -
# in the original ADM1 report by Batstone et al (2002) the original value is commented after the unit (inline)

# constant definition from the Rosen et al (2006) BSM2 report


Base_Parameters = {"R": 0.083145,
                   "T_base": 298.15,
                   "P_atm": 1.013,
                   "T_op": 308.15,
                   "V_liq": 3400,
                   "V_gas": 300,
                   "pH_UL_ac": 7,
                   "pH_LL_ac": 6,
                   "pH_UL_aa": 5.5,
                   "pH_LL_aa": 4,
                   "pH_UL_h2": 6,
                   "pH_LL_h2": 5,
                   'q_in': 170
                   }

Model_Parameters = {
    "f_sI_xc": 0.1,
    "f_xI_xc":  0.2,
    "f_ch_xc":  0.2,
    "f_pr_xc":  0.2,
    "f_li_xc":  0.3,
    "N_xc":  0.0376 / 14,
    "N_I": 0.06 / 14,
    "N_aa": 0.007,
    "C_xc": 0.02786,
    "C_sI": 0.03,
    "C_ch": 0.0313,
    "C_pr": 0.03,
    "C_li": 0.022,
    "C_xI": 0.03,
    "C_su": 0.0313,
    "C_aa": 0.03,
    "f_fa_li": 0.95,
    "C_fa": 0.0217,
    "f_h2_su":  0.19,
    "f_bu_su":  0.13,
    "f_pro_su":  0.27,
    "f_ac_su":  0.41,
    "N_bac":  0.08 / 14,
    "C_bu":  0.025,
    "C_pro":  0.0268,
    "C_ac":  0.0313,
    "C_bac":  0.0313,
    "Y_su":  0.1,
    "f_h2_aa":  0.06,
    "f_va_aa":  0.23,
    "f_bu_aa":  0.26,
    "f_pro_aa":  0.05,
    "f_ac_aa":  0.40,
    "C_va":  0.024,
    "Y_aa":  0.08,
    "Y_fa":  0.06,
    "Y_c4":  0.06,
    "Y_pro":  0.04,
    "C_ch4":  0.0156,
    "Y_ac":  0.05,
    "Y_h2":  0.06,
    "k_dis":  0.5,
    "k_hyd_ch":  10,
    "k_hyd_pr":  10,
    "k_hyd_li":  10,
    "K_S_IN":  10 ** -4,
    "k_m_su":  30,
    "K_S_su":  0.5,
    "pH_UL_aa":  5.5,
    "pH_LL_aa":  4,
    "k_m_aa":  50,
    "K_S_aa":  0.3,
    "k_m_fa":  6,
    "K_S_fa":  0.4,
    "K_I_h2_fa":  5 * 10 ** -6,
    "k_m_c4":  20,
    "K_S_c4":  0.2,
    "K_I_h2_c4":  10 ** -5,
    "k_m_pro":  13,
    "K_S_pro":  0.1,
    "K_I_h2_pro":  3.5 * 10 ** -6,
    "k_m_ac":  8,
    "K_S_ac":  0.15,
    "K_I_nh3":  0.0018,
    "k_m_h2":  35,
    "K_S_h2":  7 * 10 ** -6,
    "k_dec_X_su":  0.02,
    "k_dec_X_aa":  0.02,
    "k_dec_X_fa":  0.02,
    "k_dec_X_c4":  0.02,
    "k_dec_X_pro":  0.02,
    "k_dec_X_ac":  0.02,
    "k_dec_X_h2":  0.02,
    "N_xc":  0.0376 / 14,
    "N_I":  0.06 / 14,
    "N_aa":  0.007,
    "C_xc":  0.02786,
    "C_sI":  0.03,
    "C_ch":  0.0313,
    "C_pr":  0.03,
    "C_li":  0.022,
    "C_xI":  0.03,
    "C_su":  0.0313,
    "C_aa":  0.03,
    "f_fa_li":  0.95,
    "C_fa":  0.0217,
    "f_h2_su":  0.19,
    "f_bu_su":  0.13,
    "f_pro_su":  0.27,
    "f_ac_su":  0.41,
    "N_bac":  0.08 / 14,
    "C_bu":  0.025,
    "C_pro":  0.0268,
    "C_ac":  0.0313,
    "C_bac":  0.0313,
    "Y_su":  0.1,
    "f_h2_aa":  0.06,
    "f_va_aa":  0.23,
    "f_bu_aa":  0.26,
    "f_pro_aa":  0.05,
    "f_ac_aa":  0.40,
    "C_va":  0.024,
    "Y_aa":  0.08,
    "Y_fa":  0.06,
    "Y_c4":  0.06,
    "Y_pro":  0.04,
    "C_ch4":  0.0156,
    "Y_ac":  0.05,
    "Y_h2":  0.06,
    "k_dis":  0.5,
    "k_hyd_ch":  10,
    "k_hyd_pr":  10,
    "k_hyd_li":  10,
    "K_S_IN":  10 ** -4,
    "k_m_su":  30,
    "K_S_su":  0.5,
    "k_m_aa":  50,
    "K_S_aa":  0.3,
    "k_m_fa":  6,
    "K_S_fa":  0.4,
    "K_I_h2_fa":  5 * 10 ** -6,
    "k_m_c4":  20,
    "k_m_pr":  13,
    "K_S_c4":  0.2,
    "K_I_h2_c4":  10 ** -5,
    "k_m_pro":  13,
    "K_S_pro":  0.1,
    "K_I_h2_pro":  3.5 * 10 ** -6,
    "k_m_ac":  8,
    "K_S_ac":  0.15,
    "K_I_nh3":  0.0018,
    "Q_ad": 1000.0,
    "k_m_h2":  35,
    "K_S_h2":  7 * 10 ** -6,
    "k_dec_X_su":  0.02,
    "k_dec_X_aa":  0.02,
    "k_dec_X_fa":  0.02,
    "k_dec_X_c4":  0.02,
    "k_dec_X_pro":  0.02,
    "k_dec_X_ac":  0.02,
    "k_dec_X_h2":  0.02,
    "K_w":  10 ** -14.0 * np.exp((55900 / (100 * Base_Parameters["R"])) * (1 / Base_Parameters["T_base"] - 1 / Base_Parameters["T_op"])),
    "K_a_va":  10 ** -4.86,
    "K_a_bu":  10 ** -4.82,
    "K_a_pro":  10 ** -4.88,
    "K_a_ac":  10 ** -4.76,
    "K_a_co2":  10 ** -6.35 * np.exp((7646 / (100 * Base_Parameters["R"])) * (1 / Base_Parameters["T_base"] - 1 / Base_Parameters["T_op"])),
    "K_a_IN":  10 ** -9.25 * np.exp((51965 / (100 * Base_Parameters["R"])) * (1 / Base_Parameters["T_base"] - 1 / Base_Parameters["T_op"])),
    "k_A_B_va":  10 ** 10,
    "k_A_B_bu":  10 ** 10,
    "k_A_B_pro":  10 ** 10,
    "k_A_B_ac":  10 ** 10,
    "k_A_B_co2":  10 ** 10,
    "k_A_B_IN":  10 ** 10,
    "p_gas_h2o":  0.0313 * np.exp(5290 * (1 / Base_Parameters["T_base"] - 1 / Base_Parameters["T_op"])),
    "k_p": 5 * 10 ** 4,
    "k_L_a":  200.0,
    "K_H_co2":  0.035 * np.exp((-19410 / (100 * Base_Parameters["R"])) * (1 / Base_Parameters["T_base"] - 1 / Base_Parameters["T_op"])),
    "K_H_ch4":  0.0014 * np.exp((-14240 / (100 * Base_Parameters["R"])) * (1 / 1 / Base_Parameters["T_base"] - 1 / Base_Parameters["T_op"])),
    "K_H_h2":  7.8 * 10 ** -4 * np.exp(-4180 / (100 * Base_Parameters["R"]) * (1 / 1 / Base_Parameters["T_base"] - 1 / Base_Parameters["T_op"])),
    "V_ad": Base_Parameters["V_liq"] + Base_Parameters["V_gas"],
    "K_pH_aa": (10 ** (-1 * (Base_Parameters["pH_LL_aa"] + Base_Parameters["pH_UL_aa"]) / 2.0)),
    "nn_aa":  (3.0 / (Base_Parameters["pH_UL_aa"] - Base_Parameters["pH_LL_aa"])),
    "K_pH_ac":  (10 ** (-1 * (Base_Parameters["pH_LL_ac"] + Base_Parameters["pH_UL_ac"]) / 2.0)),
    "n_ac":  (3.0 / (Base_Parameters["pH_UL_ac"] - Base_Parameters["pH_LL_ac"])),
    "K_pH_h2":  (10 ** (-1 * (Base_Parameters["pH_LL_h2"] + Base_Parameters["pH_UL_h2"]) / 2.0)),
    "n_h2":  (3.0 / (Base_Parameters["pH_UL_h2"] - Base_Parameters["pH_LL_h2"])),
}

Inlet_Conditions = {"S_su_in": 0.01,
                    "S_aa_in": 0.001,
                    "S_fa_in": 0.001,
                    "S_va_in": 0.001,
                    "S_bu_in": 0.001,
                    "S_pro_in": 0.001,
                    "S_ac_in": 0.001,
                    "S_h2_in": 10 ** -8,
                    "S_ch4_in": 10 ** -5,
                    "S_IC_in": 0.04,
                    "S_IN_in": 0.01,
                    "S_I_in": 0.02,
                    "X_xc_in": 2.0,
                    "X_ch_in": 5.0,
                    "X_pr_in": 20.0,
                    "X_li_in": 5.0,
                    "X_su_in": 0.0,
                    "X_aa_in": 0.01,
                    "X_fa_in": 0.01,
                    "X_c4_in": 0.01,
                    "X_pro_in": 0.01,
                    "X_ac_in": 0.01,
                    "X_h2_in": 0.01,
                    "X_I_in": 25.0,
                    "S_cation_in": 0.04,
                    "S_anion_in": 0.02,
                    "S_H_ion_in": 0.00000003423,
                    "S_va_ion_in": 0,
                    "S_bu_ion_in": 0.0,
                    "S_pro_ion_in": 0.0,
                    "S_ac_ion_in": 0,
                    "S_hco3_ion_in": 0,
                    "S_nh3_in": 0.0,
                    "S_gas_h2_in": 0,
                    "S_gas_ch4_in": 0,
                    "S_gas_co2_in": 0.0,
                    "S_nh4_ion_in":  0,
                    "S_co2_in":  0
                    }


Initial_Conditions = {
    "S_su": 0.012,
    "S_aa": 0.0053,
    "S_fa": 0.099,
    "S_va": 0.012,
    "S_bu": 0.013,
    "S_pro": 0.016,
    "S_ac": 0.2,
    "S_h2": 2.30 * 10 ** -7,
    "S_ch4": 0.055,
    "S_IC": 0.15,
    "S_IN": 0.13,
    "S_I": 0.33,
    "X_xc": 0.31,
    "X_ch": 0.028,
    "X_pr": 0.1,
    "X_li": 0.1,
    "X_su": 0.42,
    "X_aa": 1.18,
    "X_fa": 0.24,
    "X_c4": 0.01,
    "X_pro": 0.14,
    "X_ac": 0.76,
    "X_h2": 0.32,
    "X_I": 25.6,
    "S_cation": 0.040,
    "S_anion": 0.020,
    "S_H_ion": 0.00000003423,
    "S_va_ion": 0.011,
    "S_bu_ion": 0.013,
    "S_pro_ion": 0.016,
    "S_ac_ion": 0.2,
    "S_hco3_ion": 0.14,
    "S_nh3": 0.0041,
    "S_gas_h2": 1.02 * 10 ** -5,
    "S_gas_ch4": 1.63,
    "S_gas_co2": 0.014,
    "S_nh4_ion":  0,
    "S_co2":  0}

Species = [
    "S_su",
    "S_aa",
    "S_fa",
    "S_va",
    "S_bu",
    "S_pro",
    "S_ac",
    "S_h2",
    "S_ch4",
    "S_IC",
    "S_IN",
    "S_I",
    "X_xc",
    "X_ch",
    "X_pr",
    "X_li",
    "X_su",
    "X_aa",
    "X_fa",
    "X_c4",
    "X_pro",
    "X_ac",
    "X_h2",
    "X_I",
    "S_cation",
    "S_anion",
    "S_H_ion",
    "S_va_ion",
    "S_bu_ion",
    "S_pro_ion",
    "S_ac_ion",
    "S_hco3_ion",
    "S_co2",
    "S_nh3",
    "S_nh4_ion",
    "S_gas_h2",
    "S_gas_ch4",
    "S_gas_co2",
]

Reactions = [
    'Disintegration',
    'Hydrolysis carbohydrates',
    'Hydrolysis of proteins',
    'Hydrolysis of lipids',
    'Uptake of sugars',
    'Uptake of amino acids',
    'Uptake of LCFA',
    'Uptake of valerate',
    'Uptake of butyrate',
    'Uptake of propionate',
    'Uptake of acetate',
    'Uptake of Hydrogen',
    'Decay of Xsu',
    'Decay of Xaa',
    'Decay of Xfa',
    'Decay of Xc4',
    'Decay of Xpro',
    'Decay of Xac',
    'Decay of Xh2',
    'Acid Base Equilibrium (Va)',
    'Acid Base Equilibrium (Bu)',
    'Acid Base Equilibrium (Pro)',
    'Acid Base Equilibrium (Ac)',
    'Acid Base Equilibrium (CO2)',
    'Acid Base Equilibrium (In)',
    'Gas Transfer H2',
    'Gas Transfer CH4',
    'Gas Transfer CO2'
]

if __name__ == '__main__':

    with open('Reactions.json', 'w') as f:
        json.dump(Reactions, f)

    with open('Species.json', 'w') as f:
        json.dump(Species, f)

    with open('Initial_Conditions.json', 'w') as f:
        json.dump(Initial_Conditions, f)
    
    with open('Inlet_Conditions.json', 'w') as f:
        json.dump(Inlet_Conditions, f)

    with open("Base_Parameters.json", "w") as f:
        json.dump(Base_Parameters, f)

    with open("Model_Parameters.json", "w") as f:
        json.dump(Model_Parameters, f)

